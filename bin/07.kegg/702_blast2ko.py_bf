#!/usr/bin/env python
# -*- coding: utf-8 -*- #
import sys
import argparse
from jinja2 import Environment, FileSystemLoader
from workflow.util.useful import mkdir, image_trans, Rrun
from workflow.util.globals import const
import os
import re


def read_params(args):
    parser = argparse.ArgumentParser(description='''conver blast m8 format to ko format | v1.0 at 2017/1/23 by huangy ''')
    parser.add_argument('-i', '--blat_m8_file', dest='blat_m8_file', metavar='FILE', type=str, required=True,
                        help="output of blast in format -m 8")
    #TODO : the best hit = 1
    parser.add_argument('-o', '--out_file', dest='out_file', metavar='FILE', type=str, required=True,
                        help="set the output file")
    parser.add_argument("--kegg_db",dest="kegg_db",metavar="FILE",type=str,\
                        default="/data_center_02/Database/KEGG/20141209/kegg_all_clean.fa",\
                        help="set min score for filter")
    args = parser.parse_args()
    params = vars(args)
    return params


if __name__ == '__main__':
    reload(sys)
    sys.setdefaultencoding('utf8')
    params = read_params(sys.argv)
    tool_default_dir = const.tool_default_dir
    in_file = params["blat_m8_file"]
    out_file = params["out_file"]
    kegg_db = params["kegg_db"]

    # check input files
    if not os.path.isfile(in_file):
        raise Exception("%s 不存在"%in_file)
    if not os.path.isfile(kegg_db):
        raise Exception("%s 不存在"%kegg_db)
    blast_out = in_file
    kegg = kegg_db
    output = out_file
    # read blast_out
    genes = {}
    blast_r = {}
    kos = {}
    num = 0
    with open(in_file,"r") as fqin:
        for line in fqin:
            tabs = line.strip().split("\t")
            genes[tabs[0]] = 1
            tabs[0] = tabs[0].split("\s")[0]
            if tabs[0] in blast_r:
                num =+ 1
                #默认情况下不存在num大于1
                print "err num > 1"
            else:
                num = 1
                blast_r[tabs[0]]=[]
                blast_r[tabs[0]].append([tabs[-2],tabs[-1],tabs[1],num])
            kos[tabs[1]] = []
# read kegg_db
    with open(kegg_db,"r") as fqin:
        for line in fqin:
            line = line.strip()
            if re.match("^>.*[\s;]\sK\d+",line):
                #kegg_BD有需要冗余的序列
                tabs = line.lstrip(">").split(" ",1)
                if kos.has_key(tabs[0]):
                    tabs[1] = " %s"%tabs[1]
                    # tabs[1] = re.match("([ ;]) [^K][^;]*\s;",tabs[1]).group(1)
                    if re.match("^[ ;]K[\d]+.*",tabs[1]):
                        continue
                    tabs[1] = re.sub("; (K[\d]+)","|%s"%re.match(".*; (K[\d]+)",tabs[1]).group(1),tabs[1])
                    tabs[1] = re.sub("^ *","",tabs[1])
                    for value in tabs[1].split("|"):
                        value = value.strip()
                        tabs2 = value.split(" ",1)
                        id = tabs2[0]
                        if re.match("^K\d+",id):
                            if len(tabs2[1].split("; "))>1:
                                definition = "%s;%s"%(tabs2[1].split("; ",1)[0],re.match(".*(\([a-zA-Z]\))$",tabs2[1]).group(1))
                            else:
                                definition = tabs2[1]
                            kos[tabs[0]].append((id,definition))
    total = 0
    yes = 0
    genes = sorted(genes.iteritems(), key=lambda d:d[1], reverse = True)
    content = ""
    for (gene,value) in genes:
        total = total+1
        content = "%s%s\t"%(content,gene)
        first = 1
        koids = []
        if gene in blast_r:
            for result in blast_r[gene]:
                if (result[2] in kos) and (len(kos[result[2]])>0):
                    if first ==1:
                        yes =yes+ 1
                        content = "%s%s|%s|%s|%s|%s|%s"\
                                          %(content,kos[result[2]][0][0],result[3],result[0],result[1],result[2],kos[result[2]][0][1])
                        koids.append(kos[result[2]][0][0])
                        for i in range(1,len(kos[result[2]])):
                            content = "%s!%s|%s|%s|%s|%s|%s"%(content,kos[result[2]][i][0],result[3],result[0],result[1],result[2],kos[result[2]][i][1])
                            koids.append(kos[result[2]][i][0])
                        first = 0
                    else:
                        for i in range(0,len(kos[result[2]])):
                            if ",%s,"%(",".join(koids)).find(","+kos[result[2]][i][0]+","):
                                content = "%s!%s|%s|%s|%s|%s|%s"\
                                          %(content,kos[result[2]][i][0],result[3],result[0],result[1],result[2],kos[result[2]][i][1])
                                koids.append(kos[result[2]][i][0])
                content = "%s\n"%content
        else:
            print "err gene"

with open(out_file,"w") as fqout:
    fqout.write("# Method: BLAST\n")
    fqout.write("# Summary:\t%s succeed, %s fail\n\n"%(yes,total-yes))
    fqout.write("# query\tko_id:rank:evalue:score:identity:ko_definition\n")
    fqout.write(content)


