#!/usr/bin/env python
#-*- coding: utf-8 -*-

# Description: 
# Copyright (C) 20170706 Ruiyi Corporation
# Email: lixr@realbio.cn

import os, re, yaml
from configparser import ConfigParser
from workflow.util.useful import gettime, const, mkdir, parse_group

bin_dir = '%s/02.taxonomy' % const.bin_default_dir
tool_dir = const.tool_default_dir

def use_snakemake_method(config, name):
    print gettime('start create snakemake step script')
    commands = []
    main_dir = os.path.dirname(config)
    work_dir = '%s/%s/preprocess_for_taxon_profile/snakemake_method' % (main_dir, name)
    mkdir(work_dir)

    # updata config.yaml
    with open(const.config_yaml,'r') as inf:
        data = yaml.load(inf)
    data['clean_reads_dir'] = '%s/01.clean_reads' % main_dir
    data['clean_reads_list'] = '%s/clean_reads.list' % work_dir
    data['outdir'] = '%s/alignment' % work_dir
    with open('%s/config.yaml' % work_dir, 'w') as outf:
        yaml.dump(data, outf, default_flow_style=False)

    # update cluster.yaml
    with open(const.cluster_yaml,'r') as inf:
        data = yaml.load(inf)
    data['__default__']['qsublog'] = '%s/log/' % work_dir
    data['align']['qsublog'] = '%s/log/align/' % work_dir
    data['abund']['qsublog'] = '%s/log/abund/' % work_dir
    data['abund_profile']['qsublog'] = '%s/log/' % work_dir
    with open('%s/cluster.yaml' % work_dir,'w') as outf:
        yaml.dump(data, outf, default_flow_style=False)
    # prepare file
    os.system('cp %s %s/Snakefile' % (const.snakemake, work_dir))
    mkdir('%s/log/align/'%work_dir,'%s/log/abund/'%work_dir, '%s/profile'%work_dir)

    commands.append('cp %s/01.clean_reads/clean_reads.list .' % main_dir)
    commands.append('## calculate abundance')
    commands.append('source activate /data_center_03/USER/huangy/soft/MAIN/anaconda2/envs/gutbio')
    commands.append('snakemake --cluster-config cluster.yaml --cluster \'qsub -o {cluster.qsublog} -e {cluster.qsublog} -l vf={cluster.vf} -q {cluster.queue}\' -j 40 --nolock')
    commands.append('source deactivate')
    commands.append('## form species profile')
    commands.append('ls alignment/*/*root.abundance >abund.list')
    #commands.append('python %s/02_taxonomy.py -d . -c ../%s/qc_%s.stat.tsv' % (bin_dir, raw_dir_name, batch_num))
    commands.append('python %s/02_taxonomy.py -i abund.list' % bin_dir)
    commands.append('rm abund.list')
    commands.append('for i in all phylum class order family genus species; do ls alignment/*/*$i.abundance |perl %s/201_profile - >profile/$i.profile; done' % bin_dir)
    commands.append('num=1;for i in phylum class order family genus species; do let num=num+1; python %s/201_profile_convert.py -i profile/$i.profile -o profile/otu_table_L$num.txt; done' % bin_dir)
    commands.append('ls profile/* | while read a; do cp $a ../../taxon_profile; done')
    commands.append('## reads use rate')
    commands.append('#ls alignment/*/*.MATCH.logs >match_logs.list')
    commands.append('#python %s/201_use_rate.py -i match_logs.list -o use_rate.stat.tsv -clean %s/00.raw_reads/qc_stat.tsv' % (bin_dir, main_dir))
    commands.append('#rm match_logs.list')
    return work_dir, commands

def use_old_version(config, name):
    print gettime('start create old version step script')
    commands = []
    main_dir = os.path.dirname(config)
    work_dir = '%s/%s/preprocess_for_taxon_profile/old_version' % (main_dir, name)
    mkdir(work_dir, '%s/profile'%work_dir)
    commands.append('## calculate abundance')
    commands.append('cp %s/01.clean_reads/clean_reads.list ./' % main_dir)
    commands.append('%s/speciesabundance.pl %s/01.clean_reads/clean_reads.list .' % (bin_dir, main_dir))
    commands.append('nohup /data_center_03/USER/zhongwd/bin/qsge --queue all.q --memery 15G --jobs 10 --prefix MA --lines 1 shell/match.sh &')
    commands.append('nohup /data_center_03/USER/zhongwd/bin/qsge --queue all.q --memery 15G --jobs 10 --prefix AB --lines 2 shell/abun.sh &')
    commands.append('## form species profile')
    commands.append('ls alignment/*/*root.abundance >abund.list')
    #commands.append('python %s/02_taxonomy.py -d . -c ../%s/qc_%s.stat.tsv' % (bin_dir, raw_dir_name, batch_num))
    commands.append('python %s/02_taxonomy.py -i abund.list' % bin_dir)
    commands.append('rm abund.list')
    commands.append('for i in all phylum class order family genus species; do ls alignment/*/*$i.abundance |perl %s/201_profile - >profile/$i.profile; done' % bin_dir)
    #commands.append('cut -f1 %s/materials/sample.list |while read a; do ls alignment/$a/*phylum.abundance; done | profile - >profile/phylum.profilea'%main_dir)
    commands.append('num=1;for i in phylum class order family genus species; do let num=num+1; python %s/201_profile_convert.py -i profile/$i.profile -o profile/otu_table_L$num.txt; done' % bin_dir)
    commands.append('ls profile/* | while read a; do cp $a ../../taxon_profile; done')
    commands.append('## reads use rate')
    commands.append('#ls alignment/*/*.MATCH.logs >match_logs.list')
    commands.append('#python %s/201_use_rate.py -i match_logs.list -o use_rate.stat.tsv -clean %s/00.raw_reads/qc_stat.tsv' % (bin_dir, main_dir))
    commands.append('#rm match_logs.list')
    return work_dir, commands

def use_metaphlan2_method(config, name):
    print gettime('start create metaphlan2 step script')
    work_dir, commands = '',[]
    main_dir = os.path.dirname(config)
    work_dir = '%s/%s/preprocess_for_taxon_profile/metaphlan2' % (main_dir, name)
    mkdir(work_dir)
    print 'This method is not complete,please select other method!'
    return work_dir, commands

def use_kraken2_method(config, name):
    print gettime('start create kraken2 step script')
    work_dir, commands = '',[]
    main_dir = os.path.dirname(config)
    work_dir = '%s/%s/preprocess_for_taxon_profile/kraken2' % (main_dir, name)
    mkdir(work_dir)
    print 'This method is not complete,please select other method!'
    return work_dir, commands

def taxon_pre(config, name):
    main_dir = os.path.dirname(config)
    mkdir('%s/%s/taxon_profile' % (main_dir, name))
    methods = ["snakemake","old_version","metaphlan2","kraken2"]
    for method in methods[:2]:
        if method == "snakemake":
            dir, commands = use_snakemake_method(config, name)
        elif method == "old_version":
            dir, commands = use_old_version(config, name)
        elif method == "metaphlan2":
            dir, commands = use_metaphlan2_method(config, name)
        else:
            dir, commands = use_kraken2_method(config, name)
        yield dir, commands

def samples(config, name):
    commands = []
    main_dir = os.path.dirname(config)
    work_dir = '%s/%s/samples_nalysis' % (main_dir, name)
    pro_dir = '%s/%s/taxon_profile' % (main_dir, name)
    mkdir(work_dir)
    # alignment目录
    snakemake_method_dir = '%s/%s/preprocess_for_taxon_profile/snakemake_method' % (main_dir, name)
    # get group summary
    config_gene = ConfigParser()
    config_gene.read(config)
    sample_names = config_gene.get('param','sample_name')
    raw_dir_name = config_gene.get('param','raw_dir_name')
    alpha_group = config_gene.get('param','alpha_group')
    with open(config_gene.get('param','batch_list')) as fqin:
        for line in fqin:
            tabs = line.strip().split()
            if len(tabs)>1:
                batch_num = tabs[0]
    sample_num_in_groups,min_sample_num_in_groups,sample_num_total,group_num=parse_group(sample_names)

    commands.append('## 00.reads use rate ')
    commands.append('ls ../preprocess_for_taxon_profile/*/alignment/*/*.MATCH.logs > %s/list' % work_dir)
    commands.append('python %s/201_use_rate.py -i %s/list -o %s/use_rate.stat.tsv -clean %s/../../00.raw_reads/qc_rawdata.stat.tsv' % (bin_dir, work_dir, work_dir, work_dir))
    commands.append('rm %s/list' % work_dir)

    commands.append('## 01.piechart Need finish')
    mkdir('%s/01.piechart' % work_dir)
    commands.append('for i in phylum genus species; do find .. -name *$i.abundance | while read a; do b=${a##*/}; perl %s/s01_pie.pl <$a >01.piechart/${b%%.*}.pie.svg; done; done' % bin_dir)
    #commands.append('ls alignment/*/*species.abundance |while read a; do b=${a##*/}; perl %s/00.piechart/pie.pl <$a >00.piechart/${b%%.*}.pie.svg; done' % bin_dir)
    #commands.append('ls alignment/*/*genus.abundance |while read a; do b=${a##*/}; perl %s/00.piechart/pie.pl <$a >00.piechart/${b%%.*}.pie.svg; done' % bin_dir)
    
    #commands.append('## 01.barplot')
    #mkdir('%s/01.barplot' % work_dir)
    #os.system('cp alpha_group 01.barplot/all_Sample.list' % (main_dir, subgroup, work_dir, subgroup))
    #commands.append('%s/g01_barplot.py -t %s/ -o 01.barplot/ -g 01.barplot/all_Sample.list' % (bin_dir, pro_dir))
    #commands.append('%s/g01_barplot.py -t %s/ -o 01.barplot/ -g 01.barplot/all_Sample.list --level 7' % (bin_dir, pro_dir))
    
    commands.append('## 02.venn_flower')
    venn_dir = '02.venn_flower'
    mkdir('%s/02.venn_flower' % work_dir)
    if sample_num_total>=6 and sample_num_total<=30:
        commands.append('for i in phylum genus species; do perl %s/g02_flower.pl ../taxon_profile/$i.profile %s %s/$i/; done' % (bin_dir, sample_names, venn_dir))
        #commands.append('perl %s/02.taxon/7_flower.pl profile/species.profile %s %s/species/' % (bin_dir, sample_names, vennf_dir))
        #commands.append('perl %s/02.taxon/7_flower.pl profile/genus.profile %s %s/genus/' % (bin_dir, sample_names, vennf_dir))
    elif sample_num_total>=2 and sample_num_total<6:
        commands.append('for i in phylum genus species; do perl %s/g02_flower.pl ../taxon_profile/$i.profile %s %s/$i/; done' % (bin_dir, sample_names, venn_dir))
        #commands.append('python %s/02.taxon/7_venn_flower.py -i profile/species.profile -o %s -l species -g %s ' % (bin_dir, vennf_dir, sample_names))
        #commands.append('python %s/02.taxon/7_venn_flower.py -i profile/genus.profile -o %s -l genus -g %s ' % (bin_dir, vennf_dir, sample_names))
    else:
        commands.append('# sample too much')

    commands.append('## 03.accumulate')
    accum_dir = '03.accum_share'
    mkdir('%s/03.accum_share' % work_dir)
    commands.append('for i in phylum genus species; do ln %s/$i.profile %s/; done' % (pro_dir, accum_dir))
    # commands.append('for i in phylum genus species; do ln %s/taxon_profile/$i.profile %s/; done' % (main_dir, accum_dir))  # by liulf
    #commands.append('ln %s/profile/species.profile %s/species.profile' % (work_dir, accum_dir))
    #commands.append('ln %s/profile/genus.profile %s/genus.profile' % (work_dir, accum_dir))
    commands.append('for i in phylum genus species; do perl %s/Accumulated_Shared_Curve.pl -p %s/$i.profile -c $i -t 100; done' % (bin_dir, accum_dir))
    #commands.append('perl %s/03.accum/Accumulated_Shared_Curve.pl -p %s/genus.profile -c genus -t 100' % (bin_dir, accum_dir))
    #commands.append('perl %s/03.accum/Accumulated_Shared_Curve.pl -p %s/species.profile -c species -t 100' % (bin_dir, accum_dir))

    commands.append('## 04.rarecurve')
    rare_dir = '04.rarecurve'
    mkdir('%s/04.rarecurve' % work_dir)
    commands.append('ls %s/alignment |while read a; do echo "python %s/204_rarefaction.py -i %s/alignment/$a/$a.MATCH -o %s/alignment/$a/ -m 1820252 -b 200 -n $a"; done >%s/04.rarecurve/rarefaction.sh' % (snakemake_method_dir, bin_dir, snakemake_method_dir, snakemake_method_dir, work_dir))
    commands.append('sh %s/04.rarecurve/rarefaction.sh' % work_dir)
    commands.append('rm %s/04.rarecurve/rarefaction.sh' % work_dir)
    commands.append('paste %s/alignment/*/rarefaction.tsv >%s/all.rarefaction.tsv' % (snakemake_method_dir, work_dir))
    commands.append('Rscript %s/204_chao1.R %s/all.rarefaction.tsv %s %s/chao1.pdf %s/chao1.png' % (bin_dir, work_dir, alpha_group, rare_dir, rare_dir))
    commands.append('#list %s/alignment/*/*MATCH > 04.rarecurve/match.list; sed \'s/.*alignment\/\(.*\)\/.*MATCH/\\1/g\' 04.rarecurve/match.list | paste - 04.rarecurve/match.list >04.rarecurve/match.list.tmp; mv -f 04.rarecurve/match.list.tmp 04.rarecurve/match.list  % (snakemake_method_dir)')
    commands.append('#nohup perl /data_center_03/USER/zhongwd/rd/05_rarecurve/RareCurve/RareCurve.pl -s clean_reads_list -m 04.rarecurve/match.list -d 04.rarecurve &')
    commands.append('## 05.treeplot')
    tree_dir = '05.treeplot'
    mkdir('%s/05.treeplot' % work_dir)
    mkdir('%s/05.treeplot-shell' % work_dir)
    commands.append('cut -f1 ../../01.clean_reads/clean_reads.list | while read a; do mkdir -p %s/$a; echo "python %s/treeplot.tax.py -i %s/alignment/$a/$a.species.abundance -o %s/$a/"; done > %s/05.treeplot-shell/work.sh' % (tree_dir, bin_dir, snakemake_method_dir, tree_dir, work_dir))
    commands.append('/data_center_03/USER/zhongwd/bin/qsge --queue all.q --memery 5G --jobs 13 --prefix py --lines 1 %s/05.treeplot-shell/work.sh' % work_dir)
    commands.append('cut -f1 ../../01.clean_reads/clean_reads.list | while read a; do cd %s/$a; perl %s/treeplot.newwick_new.pl test.info test.tax new_test.info>test.tre; python %s/treeplot.plot.py test.tre new_test.info tree.pdf; cd -; done' % (tree_dir, bin_dir, bin_dir))
    with open('%s/work.sh' % work_dir, 'w') as outf:
        outf.write('\n'.join(commands))

def group(config, name):
    main_dir = os.path.dirname(config)
    work_dir = '%s/%s/group_analysis' % (main_dir, name)
    pro_dir = '%s/%s/taxon_profile' % (main_dir, name)
    mkdir(work_dir)
    # get group summary
    config_gene = ConfigParser()
    config_gene.read(config)
    group = list(filter(None,re.split('\s+|\t|,\s*|,\t+',config_gene.get('param','group'))))
    sample_names = config_gene.get('param','sample_name')
    raw_dir_name = config_gene.get('param','raw_dir_name')
    alpha_group = config_gene.get('param','alpha_group')
    with open(config_gene.get('param','batch_list')) as fqin:
        for line in fqin:
            tabs = line.strip().split()
            if len(tabs)>1:
                batch_num = tabs[0]
    sample_num_in_groups,min_sample_num_in_groups,sample_num_total,group_num=parse_group(sample_names)

    for subgroup in group:
        grp_sh = []
        mkdir('%s/%s' % (work_dir, subgroup))
        os.system('cp %s/material/%s_group.list %s/%s/group.list' % (main_dir, subgroup, work_dir, subgroup))
        sample_num_in_groups,min_sample_num_in_groups,sample_num_total,group_num=parse_group('%s/material/%s_group.list' % (main_dir, subgroup))

        grp_sh.append('## 01.barplot Need finish')
        work_dir_201 = '%s/01.barplot' % subgroup
        mkdir('%s/%s' % (work_dir,work_dir_201))
        grp_sh.append('%s/g01_barplot.py -t %s/ -o 01.barplot/ -g group.list' % (bin_dir, pro_dir))
        grp_sh.append('%s/g01_barplot.py -t %s/ -o 01.barplot/ -g group.list --level 7' % (bin_dir, pro_dir))

        grp_sh.append('## 02.venn_flower')
        work_dir_202 = '%s/02.venn_flower' % subgroup
        mkdir('%s/%s' % (work_dir, work_dir_202))
        if group_num>=6 and group_num<=30:
            grp_sh.append('for i in phylum genus species; do perl %s/g02_flower.pl %s/$i.profile group.list 02.venn_flower/$i/; done' % (bin_dir, pro_dir))
            #grp_sh.append('perl %s/g02_flower.pl profile/species.profile group.list 02.venn_flower' % bin_dir)
            #grp_sh.append('perl %s/g02_flower.pl profile/genus.profile group.list 02.venn_flower' % bin_dir)
        elif group_num>=2 and group_num<6:
            grp_sh.append('for i in phylum genus species; do perl %s/g02_flower.pl %s/$i.profile group.list 02.venn_flower/$i/; done ' % (bin_dir, pro_dir))
            #grp_sh.append('python %s/g02_venn_flower.py -i profile/genus.profile -o 02.venn_flower -l genus -g group.list --with_group ' % bin_dir)
            #grp_sh.append('python %s/g02_venn_flower.py -i profile/species.profile -o 02.venn_flower -l species -g group.list --with_group ' % bin_dir)
        else:
            grp_sh.append('## sample too much')

        grp_sh.append('## 03.top_boxplot')
        work_dir_203 = '%s/03.top_boxplot' % subgroup
        mkdir('%s/%s' % (work_dir, work_dir_203))
        grp_sh.append('python %s/g03_top_boxplot.py -i %s/all.profile -g group.list -o 03.top_boxplot/' % (bin_dir, pro_dir))

        grp_sh.append('## 04.ternaryplot')
        work_dir_204 = '%s/04.ternaryplot' % subgroup
        mkdir('%s/%s' % (work_dir, work_dir_204))
        grp_sh.append('for i in phylum genus species; do Rscript %s/g04_ternary.R %s/$i.profile group.list 04.ternaryplot/$i.ternary.pdf $i; done' % (bin_dir, pro_dir))

        grp_sh.append('## 05.top_barplot')
        work_dir_205 = '%s/05.top_barplot' % subgroup
        mkdir('%s/%s' % (work_dir, work_dir_205))
        grp_sh.append('for i in phylum genus species; do python %s/t10_sample_clustering.py -i %s/$i.profile -g group.list -o 05.top_barplot/$i/ -t $i; done' % (tool_dir, pro_dir))

        grp_sh.append('## 06.pca')
        work_dir_206 ='%s/06.pca' % subgroup
        mkdir('%s/%s' % (work_dir, work_dir_206))
        grp_sh.append('for i in phylum genus species; do python %s/t01_pca.py -i %s/$i.profile -g group.list -o 06.pca/$i/ --with_boxplot; done' % (tool_dir, pro_dir))

        grp_sh.append('## 07.pcoa')
        work_dir_207 = '%s/07.pcoa' % subgroup
        mkdir('%s/%s' % (work_dir, work_dir_207))
        grp_sh.append('for i in phylum genus species; do python %s/t02_pcoa.py -i %s/$i.profile -g group.list -o 07.pcoa/$i/ --with_boxplot; done' % (tool_dir, pro_dir))

        grp_sh.append('## 08.nmds')
        work_dir_208 = '%s/08.nmds' % subgroup
        mkdir('%s/%s' % (work_dir, work_dir_208))
        grp_sh.append('for i in phylum genus species; do python %s/t03_nmds.py -i %s/$i.profile -g group.list -o 08.nmds/$i/; done' % (tool_dir, pro_dir))

        grp_sh.append('## 09.anosim')
        work_dir_209 = '%s/09.anosim' % subgroup
        mkdir('%s/%s' % (work_dir, work_dir_209))
        grp_sh.append('for i in phylum genus species; do python %s/t04_anosim.py -i %s/$i.profile -g group.list -o 09.anosim/$i/; done' % (tool_dir, pro_dir))

        grp_sh.append('## 10.adonis')
        work_dir_209 = '%s/10.adonis' % subgroup
        mkdir('%s/%s' % (work_dir, work_dir_209))
        grp_sh.append('for i in phylum genus species; do python %s/t12_adonis_pca.py -i %s/$i.profile -g group.list -o 10.adonis/$i/; done' % (tool_dir, pro_dir))
        grp_sh.append('for i in phylum genus species; do python %s/t12_adonis_pcoa.py -i %s/$i.profile -g group.list -o 10.adonis/$i/; done' % (tool_dir, pro_dir))
        
        grp_sh.append('## 11.mrpp')
        work_dir_210 = '%s/11.mrpp' % subgroup
        mkdir('%s/%s' % (work_dir, work_dir_210))
        grp_sh.append('for i in phylum genus species; do python %s/t05_mrpp.py -i %s/$i.profile -g group.list -o 11.mrpp/$i/; done' % (tool_dir, pro_dir))

        grp_sh.append('## 12.diff')
        work_dir_211 = '%s/12.diff' % subgroup
        mkdir('%s/%s' % (work_dir, work_dir_211))
        grp_sh.append('for i in phylum genus species; do python %s/t08_diff.py -i %s/$i.profile -g group.list -o 12.diff/$i; done' % (tool_dir, pro_dir))
        grp_sh.append('for i in phylum genus species; do Rscript %s/t08_new_diff.R 12.diff/$i/diff.marker.filter.profile.tsv 12.diff/$i/diff.marker.filter.tsv group.list 12.diff/$i/${i}_diff.pdf n add; done' % tool_dir)

        grp_sh.append('## 13.lefse')
        work_dir_212 = '%s/13.lefse/' % subgroup
        mkdir('%s/%s' % (work_dir, work_dir_212))
        grp_sh.append('for i in phylum genus species; do /data_center_03/USER/huangy/soft/MAIN/anaconda2/bin/python2.7 %s/t11_lefse.py -i %s/$i.profile -l /data_center_03/USER/huangy/soft/LEfSe_lzb -g group.list -o 13.lefse/$i --LDA 2; done' % (tool_dir, pro_dir))
        with open('%s/%s/work.sh' % (work_dir, subgroup), 'w') as outf:
            outf.write('\n'.join(grp_sh))

def taxon(config, name):
    print gettime('start create nalysis step script')
    samples(config, name)
    group(config, name)
